; CouchDB Configuration Settings

; Custom settings should be made in this file. They will override settings
; in default.ini, but unlike changes made to default.ini, this file won't be
; overwritten on server upgrade.

[couchdb]
;max_document_size = 4294967296 ; bytes
uuid = 01a58251080c80c6f4e2b8f6ed81997d
database_dir = /usr/local/var/lib/couchdb/databases
view_index_dir = /usr/local/var/lib/couchdb/views
#uri_file = /usr/local/var/run/couchdb/couch.uri

;Lucene-specific option
;increase the timeout from 5 seconds.
os_process_timeout=60000

[httpd]
port = 5984
bind_address = 0.0.0.0
; Options for the MochiWeb HTTP server.
;server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
; For more socket options, consult Erlang's module 'inet' man page.
;socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]

; Uncomment next line to trigger basic-auth popup on unauthorized requests.
;WWW-Authenticate = Basic realm="administrator"

; Uncomment next line to set the configuration modification whitelist. Only
; whitelisted values may be changed via the /_config URLs. To allow the admin
; to change this value over HTTP, remember to include {httpd,config_whitelist}
; itself. Excluding it from the list would require editing this file to update
; the whitelist.
;config_whitelist = [{httpd,config_whitelist}, {log,level}, {etc,etc}]
enable_cors = true

[query_servers]
;nodejs = /usr/local/bin/couchjs-node /path/to/couchdb/share/server/main.js


[httpd_global_handlers]
;_google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}
/ = {couch_httpd_misc_handlers, handle_welcome_req, <<"">>}
_fti = {couch_httpd_proxy, handle_proxy_req, <<"http://lucene:5985">>}
_metrics = {couch_httpd_proxy, handle_proxy_req, <<"http://prometheus_exporter:9984/metrics">>}

;Lucene-specific option
[httpd_db_handlers]
_fti = {couch_httpd_external, handle_external_req, <<"fti">>}
_metrics = {couch_httpd_external, handle_external_req, <<"metrics">>}

[couch_httpd_auth]
; If you set this to true, you should also uncomment the WWW-Authenticate line
; above. If you don't configure a WWW-Authenticate header, CouchDB will send
; Basic realm="server" in order to prevent you getting logged out.
; require_valid_user = false
secret = b45a90d41f51c3c5532e9c7eda7fb51d

[log]
file = /usr/local/var/lib/couchdb/log
level = warning

[log_level_by_module]
; In this section you can specify any of the four log levels 'none', 'info',
; 'error' or 'debug' on a per-module basis. See src/*/*.erl for various
; modules.
;couch_httpd = error


[os_daemons]
; For any commands listed here, CouchDB will attempt to ensure that
; the process remains alive. Daemons should monitor their environment
; to know when to exit. This can most easily be accomplished by exiting
; when stdin is closed.
;foo = /path/to/command -with args

[daemons]
; enable SSL support by uncommenting the following line and supply the PEM's below.
; the default ssl port CouchDB listens on is 6984
; httpsd = {couch_httpd, start_link, [https]}

[ssl]
;cert_file = /full/path/to/server_cert.pem
;key_file = /full/path/to/server_key.pem
;password = somepassword
; set to true to validate peer certificates
verify_ssl_certificates = false
; Path to file containing PEM encoded CA certificates (trusted
; certificates used for verifying a peer certificate). May be omitted if
; you do not want to verify the peer.
;cacert_file = /full/path/to/cacertf
; The verification fun (optional) if not specified, the default
; verification fun will be used.
;verify_fun = {Module, VerifyFun}
; maximum peer certificate depth
ssl_certificate_max_depth = 1

; To enable Virtual Hosts in CouchDB, add a vhost = path directive. All requests to
; the Virual Host will be redirected to the path. In the example below all requests
; to http://example.com/ are redirected to /database.
; If you run CouchDB on a specific port, include the port number in the vhost:
; example.com:5984 = /database
[vhosts]
;example.com = /database/

[update_notification]
;unique notifier name=/full/path/to/exe -with "cmd line arg"

; To create an admin account uncomment the '[admins]' section below and add a
; line in the format 'username = password'. When you next start CouchDB, it
; will change the password to a hash (so that your passwords don't linger
; around in plain-text files). You can add more admin accounts with more
; 'username = password' lines. Don't forget to restart CouchDB after
; changing this.
[admins]
;admin = mysecretpassword
#admin = -pbkdf2-14dd3d938eaffbc4ad8e3c56fa338d7d7aa4581f,66574166afa41d8dc7dd76d9d18ae4ec,10
#kristianko = -pbkdf2-86c799ebd7e102cabf2161390754183a9d8b1a4f,8fe52c63a98a80033e7f860764da8f49,10

[cors]
origins = *
credentials = true

;Lucene-specific option
#[external]
#fti=/usr/bin/python "/opt/app/silverside/couchdb/nodes/latest-lucene/tools/couchdb-external-hook.py --remote-port 5994"

